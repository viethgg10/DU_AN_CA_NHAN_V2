// src/lib/mongodb.ts
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
    throw new Error('Vui l√≤ng khai b√°o bi·∫øn m√¥i tr∆∞·ªùng MONGODB_URI trong file .env');
}

// Ki·ªÉm tra xem connection string c√≥ h·ª£p l·ªá kh√¥ng
if (!MONGODB_URI.startsWith('mongodb+srv://')) {
    throw new Error('MONGODB_URI kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng mongodb+srv://');
}

// Kh·ªüi t·∫°o cached connection
type CachedConnection = {
    conn: typeof mongoose | null;
    promise: Promise<typeof mongoose> | null;
};

declare global {
    var mongoose: CachedConnection;
}

let cached = global.mongoose || { conn: null, promise: null };

if (!global.mongoose) {
    global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
    if (cached.conn) {
        console.log('‚úÖ S·ª≠ d·ª•ng k·∫øt n·ªëi MongoDB ƒë√£ c√≥');
        return cached.conn;
    }

    if (!cached.promise) {
        console.log('üîÑ ƒêang k·∫øt n·ªëi t·ªõi MongoDB...');
        
        const opts = {
            bufferCommands: false,
            serverSelectionTimeoutMS: 10000, // Th·ªùi gian ch·ªù k·∫øt n·ªëi t·ªëi ƒëa 10s
        };

        try {
            cached.promise = mongoose.connect(MONGODB_URI, opts);
            const conn = await cached.promise;
            console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
            return conn;
        } catch (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
            throw error;
        }
    }

    try {
        cached.conn = await cached.promise;
        console.log('‚úÖ MongoDB connected!');
    } catch (e) {
        cached.promise = null;
        throw e;
    }

    return cached.conn;
}

export default connectDB;